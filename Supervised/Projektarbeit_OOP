import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import export_graphviz,DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import mean_absolute_error, mean_squared_error, accuracy_score, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, classification_report, precision_score
from sklearn.preprocessing import StandardScaler, Normalizer , RobustScaler
from sklearn.pipeline import make_pipeline

class RFC:
  
    def __init__(self,df, Y_class):
      self.target_names = ['class 0', 'class 1', 'class 2']
      self.Name = "Random Forest Classifier"
      self.df = df
      self.Y_class = Y_class
      self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(df, Y_class, test_size=0.2, random_state=42)

      self.model = RandomForestClassifier(random_state= 42)
      self.model.fit(self.X_train,self.y_train)
      self.y_pred = self.model.predict(self.X_test)
      self.feature_importance = self.model.feature_importances_

    def predicten(self):
      self.y_pred = self.model.predict(self.X_test)
      print(f"The Predicted Outputs are as follows: \n{self.y_pred}")

    def feature_importance(self):
      self.feature_importance = self.model.feature_importances_
      for feature,importance in zip(self.X_train.columns , self.feature_importance):
            # Feature with its Importances
          print(f"Feature: {feature} and the Importance : {importance} ")

        # Sorting the features
      sorted_indices = self.feature_importance.argsort()[::-1] # sorted in decreasing order
      sorted_importances = self.feature_importance[sorted_indices]

        #Create a Bar Plot of the feature Importances
      plt.figure(figsize = (10,6))
      plt.bar(range(self.X_train.shape[1]) , sorted_importances)
      plt.xticks( range(self.X_train.shape[1]), self.X_train.columns[sorted_indices], rotation=90)
      plt.title("Feature Importances")
      plt.show()

    def Confusion_mat(self):
      cm = confusion_matrix(self.y_test, self.y_pred)
      sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
      plt.xlabel("Predicted")
      plt.ylabel("True")
      plt.show(block=False)

    def random_filter(self):  

      Ind = np.where(self.feature_importance < self.feature_importance[-1])
      Colname = self.df.columns[Ind]

      df1 = self.df.drop(columns=Colname) 
      df1 = df1.drop(columns= "Random_Variable")
      self.y_pred = self.model.predict(self.X_test)

      self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(df1, self.Y_class, test_size=0.2, random_state=42)

      self.model = RandomForestClassifier(random_state= 42)
      self.model.fit(self.X_train , self.y_train)

      self.Confusion_mat()
      self.get_metrics_score()
  
    def params_opt(self):

      parameters = {'n_estimators':[1000, 2500, 5000, 7500, 10000], 'max_depth':[30,35,45,50], "ccp_alpha":[0.01,0.1,1,10]}
      self.opt_model = GridSearchCV(self.model, parameters)
      self.opt_model.fit(self.X_train,self.y_train)

      self.y_pred_clf = self.opt_model.predict(self.X_test)

    def get_metrics_score(self):
       print(f"The calculated Accuracy Score of the {self.Name} Model is {accuracy_score(self.y_test ,self.y_pred)}")
       print(f"The Classification Report of the {self.Name} ist \n{classification_report(self.y_test,self.y_pred ,target_names=self.target_names)}")



class Dec_tree(RFC):
   
   def __init__(self,df,Y_class, feature_importances_ = None):
      super().__init__(df,Y_class)
      self.model = DecisionTreeClassifier(random_state= 42)
      self.Name = "Decision Tree"
      self.model.fit(self.X_train,self.y_train)
      self.y_pred = self.model.predict(self.X_test)
      self.feature_importance = feature_importances_

   def params_opt(self):

      parameters = {'n_estimators':[1000, 2500, 5000, 7500, 10000], 'max_depth':[10,100,500,1000], "ccp_alpha":[0.01,0.1,1,10]}
      self.opt_model = GridSearchCV(self.model, parameters)
      self.opt_model.fit(self.X_train,self.y_train)

      self.y_pred_clf = self.opt_model.predict(self.X_test)
   

      
class SVM_clf(RFC):
   def __init__(self,df,Y_class, feature_importances_ = None, name = None ,dec = None):
      super().__init__(df,Y_class)
      if dec is None:
         self.model = make_pipeline(StandardScaler(), SVC())
      elif dec == "n":
         self.model = make_pipeline(Normalizer(), SVC())
      elif dec == "r":
         self.model = make_pipeline(RobustScaler() , SVC())      
         
      self.Name = "Support Vector Classifier" if name is None else name
      self.model.fit(self.X_train,self.y_train)
      self.y_pred = self.model.predict(self.X_test)
      self.feature_importance = feature_importances_


   def params_opt(self):
       parameters = {'kernel':{"linear", "poly", "rbf", "sigmoid"}, 'C':[0.1,1,5,10]}
       self.opt_model = GridSearchCV(self.model, parameters)
       self.opt_model.fit(self.X_train,self.y_train)

       self.y_pred_clf = self.opt_model.predict(self.X_test)


## Rawdata
# The Rawdata ist packed into a Dataframe 
df = pd.read_excel(r"C:\Users\liwas\OneDrive\Desktop\Hochschule MÃ¼nchen\MBB8\Applied ML\Projektarbeit\chiefs_knife_dataset.xlsx")

## Target Class
Y = df['Ra']


ind_0 = np.where(Y < 0.13)
ind_1 = np.where((Y >= 0.13) & (Y <= 0.21))
ind_2 = np.where(Y > 0.21)


Y_class = Y.copy()
Y_class[ind_0] = 0
Y_class[ind_1] = 1
Y_class[ind_2] = 2

## Random Variable
# We are going use a randomly generated Variable to filter out the Variables who have little to no effect on the Output of the Model. 

df = df.iloc[:, 2:-17]
df = df.drop(columns="Linie")


#Random Variable 
df["Random_Variable"] = np.random.rand(len(df),1) * 100

# Model Intialization

rfc = RFC(df, Y_class)
dt = Dec_tree(df, Y_class,rfc.model.feature_importances_)

# Only Tree Based Algorithms dont require the scaling of the Data.
# For SVC, the Scaling of the Data is required.


svc_clf_s = SVM_clf(df, Y_class,rfc.model.feature_importances_ ,"Support Vector Classifier Standerdized")
svc_clf_n = SVM_clf(df, Y_class,rfc.model.feature_importances_ ,"Support Vector Classifier Normalized","n")
svc_clf_r = SVM_clf(df, Y_class,rfc.model.feature_importances_,"Support Vector Classifier Robust Scaled","r" )

# Output Analysis through Confusion Matrix

rfc.Confusion_mat()
dt.Confusion_mat()
svc_clf_s.Confusion_mat()
svc_clf_n.Confusion_mat()
svc_clf_r.Confusion_mat()
# Metric scores

rfc.get_metrics_score()
dt.get_metrics_score()
svc_clf_s.get_metrics_score()
svc_clf_n.get_metrics_score()
svc_clf_r.get_metrics_score()

# Random Variable Filter
rfc.random_filter()
dt.random_filter()
svc_clf_s.random_filter()
svc_clf_n.random_filter()
svc_clf_r.random_filter()

# Hyperparameter Optimization
rfc.params_opt()
dt.params_opt()
svc_clf_s.params_opt()
svc_clf_n.params_opt()
svc_clf_r.params_opt()